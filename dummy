import styles from "@/assets/styles/common/list-card.module.css";
import ListCard from "@/components/common/list-card";
import ImageBuilder from "@/components/project/image-builder";
import { useAlertContext } from "@/context/alert-context";
import { useAuth } from "@/hooks/use-auth";
import { useTitle } from "@/hooks/use-title";
import ApiService from "@/shared/api-service";
import Modal from "@/shared/component/modal";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useState } from "react";

function Builds() {
  useTitle("Build Images");
  const queryClient = useQueryClient();
  const { setAlert } = useAlertContext();
  const { projectName } = useAuth();
  const [open, setOpen] = useState<boolean>(false);
  const [modalType, setModalType] = useState<"build" | "logs">("build");
  const [buildLogs, setBuildLogs] = useState<LogEventJSON[]>([]);
  const [imageBuild, setImageBuild] = useState<Build | undefined>(undefined);
  const [logsLoading, setLogsLoading] = useState(false);

  const { data: builds, isLoading } = useQuery({ queryKey: ["builder"], queryFn: fetchBuilds });
  async function fetchBuilds(): Promise<Build[] | undefined> {
    try {
      const res = await ApiService.getData<Build[]>(`builder?project_id=${projectName}`);
      return res.body;
    } catch (err: any) {
      setAlert((err as ApiError).message);
    }
  }
   
  async function fetchStatus(id: string): Promise<any> {
    try {
      const res = await ApiService.getData<any>(`builder?project_id=${id}/status`);
      const data = res.body; 
      console.log('API Status Data:', data); 
      return data;
    } catch (err: any) {
      console.error('Error fetching status data:', err);
      return null;
    }
  }  

  async function deleteBuild(id: string, setLoading: (flag: boolean) => void): Promise<void> {
    try {
      await ApiService.deleteData<Build>(`builder/${id}`);
      queryClient.invalidateQueries({ queryKey: ["builder"] });
    } catch (err) {
      setAlert((err as ApiError).message);
    } finally {
      setLoading(false);
    }
  }

  async function updateBuild(id: string): Promise<void> {
    setImageBuild(() => builds?.find(build => build.id === id));
    setModalType("build");
    setOpen(true);
  }

  async function buildLogsHandler(id: string): Promise<void> {
    try {
      setModalType("logs");
      setOpen(true);
      setLogsLoading(true);
      setBuildLogs(await ApiService.getLogs(`builder/${id}/logs?project_id=${projectName}`));
    } catch (err) {
      setAlert((err as ApiError).message);
    } finally {
      setLogsLoading(false);
    }
  }

  return (
    <div className="container px-4 mb-4" style={{ height: "calc(100vh - 181px)" }}>
      <div className="row mb-2">
        <div className="col p-0">
          <button
            type="button"
            className={`btn btn-danger btn-sm float-end px-3 ${styles.addButton}`}
            onClick={() => {
              setImageBuild(undefined);
              setModalType("build");
              setOpen(true);
            }}
          >
            <i className="bi bi-plus fs-5 text-uppercase"></i>
            BUILD
          </button>
        </div>
      </div>

      <ListCard
        isLoading={isLoading}
        data={builds!}
        remove={deleteBuild}
        build={updateBuild}
        logs={buildLogsHandler}
        message={"No Build Images Found."}
        statusData={fetchStatus} 
      />

      <Modal open={open} close={setOpen} className={styles.mw100}>
        {modalType === "build" && (
          <ImageBuilder
            onClose={() => setOpen(false)}
            projectName={projectName!}
            imageBuild={imageBuild}
            logsHandler={buildLogsHandler}
          />
        )}
        {modalType === "logs" && (
          <div className="table-responsive" style={{ maxHeight: "70vh", width: "80vw" }}>
            <table className="table">
              <thead>
                <tr>
                  <th>Content</th>
                  <th>Pod Name</th>
                  <th>Timestamp</th>
                  <th>Last</th>
                </tr>
              </thead>
              <tbody>
                {logsLoading && (
                  <tr>
                    <td colSpan={4}>Loading...</td>
                  </tr>
                )}
                {!logsLoading &&
                  buildLogs.map(log => (
                    <tr key={log?.timeStamp}>
                      <td>{log?.content}</td>
                      <td className="text-nowrap">{log?.podName}</td>
                      <td className="text-nowrap">{log?.timeStamp}</td>
                      <td>{log?.last.toString()}</td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>
        )}
      </Modal>
    </div>
  );
}

export default Builds;

this is my filel i wnat ot get status in from fetchStatus function but inside the list card the code of list card is this
how should i show the sattsus fro the api hear on the list carrd fist see what is the input cummming from the api

import styles from "@/assets/styles/common/list-card.module.css";
import NoDataFound from "@/components/common/no-data";
import { useAuth } from "@/hooks/use-auth";
import Loader from "@/shared/component/loader";
import { CircularProgress } from "@mui/material";
import { useState } from "react";
import { Link, useLocation } from "react-router-dom";

interface ListCardProps extends Props {
  isLoading: boolean;
  data: Item[];
  message?: string;
  details?: boolean;
  update?: boolean;
  build?: (build_id: string) => void;
  logs?: (build_id: string) => void;
  remove?: (id: string, setLoading: (flag: boolean) => void) => void;
  statusData?: (build_id: string) => void;
}

interface Item {
  id: string;
  name: string;
  [key: string]: any;
}

function ListCard({ isLoading, data, message, details, update, remove, build, logs }: ListCardProps) {
  const { pathname } = useLocation();
  const [activeItem, setActiveItem] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const { user } = useAuth();

  function showDetails(id: string): void {
    if (activeItem && activeItem === id) setActiveItem("");
    if ((activeItem && activeItem !== id) || !activeItem) setActiveItem(id);
  }

  function renderItem(item: Item) {
    return Object.entries(item)
      .filter(([k]) => k !== "name" && k !== "id" && k !== "template_id")
      .map(([key, value]) =>
        !(!value && value !== false) ? (
          <div key={key}>
            <span className="text-danger fw-bold text-capitalize">
              {key === "id" ? "ID" : key.replace(/[_]+/gi, " ")}
              {": "}
            </span>
            {typeof value === "boolean"
              ? value.toString().toUpperCase()
              : Array.isArray(value)
              ? value
                  .reduce((acc, cv) => {
                    // Check if the current value is an object
                    const cvStr = typeof cv === "object" ? JSON.stringify(cv) : cv;
                    // Concatenate the current value to the accumulator, ensuring it's a string
                    return acc + ", " + cvStr;
                  }, "")
                  .substring(2) // Remove the leading comma and space
              : typeof value === "object"
              ? JSON.stringify(value)
              : value}
          </div>
        ) : null
      );
  }

  function deleteHandler(id: string) {
    const pathnames = pathname.split("/");
    if (confirm(`Are you sure you want to delete this ${pathnames[pathnames.length - 1]}?`)) {
      setLoading(true);
      remove && remove(id, setLoading);
    }
  }

  return (
    <div className={`row p-3 box-shadow position-relative ${styles.card}`}>
      {isLoading && <Loader />}
      {!isLoading && (!data || data.length === 0) && <NoDataFound className="h-100" message={message} />}
      {!isLoading &&
        data?.map(item => (
          <div className={`col-12 radius ${styles.cardItem}`} key={item.id}>
            <div className="d-flex justify-content-between pb-2" style={{ paddingTop: "0.75rem" }}>
              <span>
                <span className="text-danger fw-bold">Name: </span>
                {item.name || item.id}
              </span>
              <span className="pointer" onClick={() => showDetails(item.id)}>
                <i className="bi bi-chevron-down text-danger"></i>
              </span>
            </div>
            {activeItem === item.id && <hr className="mt-0" />}
            {activeItem === item.id && (
              <div className="row mb-3 px-2">
                <div className="col-6">{renderItem(item)}</div>
                <div className="col-6">
                  {remove && item?.["created_by"] === user?.email && (
                    <button
                      type="button"
                      className={`btn btn-danger py-1 float-end ${styles.button}`}
                      disabled={!remove || item["operation_name"]?.toUpperCase() === "DELETION"}
                      onClick={() => deleteHandler(item.id)}
                    >
                      {loading && <CircularProgress color="inherit" style={{ width: "24px", height: "24px" }} />}
                      {!loading && (
                        <>
                          <i className="bi bi-trash fs-5"></i> Delete
                        </>
                      )}
                    </button>
                  )}
                  {update && item?.["created_by"] === user?.email && (
                    <Link
                      className={`btn btn-teal py-1 me-2 float-end ${styles.button} ${styles.updateButton}`}
                      to={`${pathname}/${item.id}/update`}
                    >
                      <i className="bi bi-upload fs-5"></i> Update
                    </Link>
                  )}
                  {build && (
                    <button
                      className={`btn btn-teal py-1 me-2 float-end ${styles.button}  ${styles.updateButton}`}
                      onClick={() => build(item.id)}
                    >
                      <i className="bi bi-upload fs-5"></i> Update
                    </button>
                  )}
                  {details && (
                    <Link
                      className={`btn btn-secondary py-1 me-2 float-end ${styles.button}`}
                      to={`${pathname}/${item.id}`}
                    >
                      <i className="bi bi-info fs-5"></i> Details
                    </Link>
                  )}
                  {logs && (
                    <button
                      className={`btn btn-secondary py-1 me-2 float-end ${styles.button}`}
                      onClick={() => logs(item.id)}
                    >
                      <i className="bi bi-info fs-5"></i> Build Logs
                    </button>
                  )}
                </div>
              </div>
            )}
            
          </div>
        ))}
    </div>
  );
}

export default ListCard;
