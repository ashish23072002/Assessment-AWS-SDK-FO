const { data: projects, isLoading } = useQuery({ queryKey: ['projects'], queryFn: fetchProjects });

  const { mutate, isLoading } = useMutation({
    mutationFn: projectSetup,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['projects'], refetchPage: () => true });
    }
  });


  async function fetchProjects(): Promise<Group[] | undefined> {
    try {
      const res = await axios.get<Group[]>('projects');
      return res.body;
    } catch (err: any) {
      setAlert(err.message || 'Failed to fetch projects, please try again.');
    }
  }

{
    "images": {
        "Default": [
            "asp",
            "vnc",
            "vnc2"
        ],
         "Custom": [
            "atpgui123",
            "atpfroz11ide",
            "atpgui",
            "atpvscode",
            "v1",
            "gui",
            "mbv",
            "asp",
            "vnc",
            "vnc2"
        ]
    }
}
