import { useAlertContext } from '@/context/alert-context';
import ApiService from '@/shared/api-service';
import { Button, CircularProgress, TextField, Typography } from '@mui/material';
import { useMutation } from '@tanstack/react-query';
import { getIn, useFormik } from 'formik';
import { useState } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import * as Yup from 'yup';

function Register() {
  const location = useLocation();
  const navigate = useNavigate();
  const { setAlert } = useAlertContext();
  const { mutate, isLoading } = useMutation({ mutationFn: signup });

  const [confirmPassword, setConfirmPassword] = useState('');

  const initialValues: Partial<UserAuth> = {
    name: '',
    email: location.state?.email || '',
    password: ''
  };

  const validationSchema = Yup.object({
    name: Yup.string().required('Required'),
    email: Yup.string()
      .email('Invalid email address')
      .required('Required')
      .matches(/[a-zA-Z0-9.]+@vodafone.com$/),
    password: Yup.string()
    .required('Required') .matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^a-zA-Z\d]).+$/, 'Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character.')
      .min(6, 'Must be at least 5 characters')
      .max(20, 'Must be 20 characters or less')
     
    });

  const formik = useFormik<Partial<UserAuth>>({
    initialValues,
    validationSchema,
    onSubmit: values => mutate(values)
  });

  const handleConfirmPasswordChange = event => {
    setConfirmPassword(event.target.value);
  };

  async function signup(body: UserAuth): Promise<void> {
    try {
      if (formik.values.password !== confirmPassword) {
        return setAlert('New password and confirm password do not match');
      }
      await ApiService.postData<UserAuth, User>('signup', body);
      navigate('/auth/login');
    } catch (err: any) {
      setAlert((err as ApiError).message);
    }
  }

  return (
    <form onSubmit={formik.handleSubmit} noValidate autoComplete="off">
      <Typography variant="h5" component="h1">
        Register to V-Collab
      </Typography>
      <TextField
        error={formik.touched.name && formik.errors.name ? true : false}
        type="text"
        id="name"
        label="Name"
        placeholder="Enter your name"
        variant="standard"
        onChange={formik.handleChange}
        onBlur={formik.handleBlur}
        value={formik.values.name}
        fullWidth
      />
      <TextField
        error={formik.touched.email && formik.errors.email ? true : false}
        type="email"
        id="email"
        label="Email"
        placeholder="Enter your email"
        variant="standard"
        onChange={formik.handleChange}
        onBlur={formik.handleBlur}
        value={formik.values.email}
        fullWidth
      />
      <TextField
        error={formik.touched.password && formik.errors.password ? true : false}
        type="password"
        id="password"
        label="Password"
        placeholder="Enter password"
        variant="standard"
        onChange={formik.handleChange}
        onBlur={formik.handleBlur}
        value={formik.values.password}
        fullWidth
        helperText={getIn(formik.errors, 'password') || ''}  
      />
      <TextField
        type="password"
        id="confirm_password"
        label="Confirm Password"
        placeholder="Confirm password"
        variant="standard"
        fullWidth
        onChange={handleConfirmPasswordChange}
        value={confirmPassword}
      />
      {isLoading && (
        <Button variant="contained" fullWidth color="error">
          <CircularProgress color="inherit" style={{ width: '24px', height: '24px' }} />
        </Button>
      )}
      {!isLoading && (
        <Button variant="contained" fullWidth color="error" type="submit" disabled={!formik.isValid}>
          Sign Up
        </Button>
      )}
      <Typography component="p">
        Already a member?
        <Link to="/auth/login"> Login</Link>
      </Typography>
    </form>
  );
}

export default Register;


i wnant this to be the password match shoud be dynamic as soon the requriment  matches the comment also being 
updated, it shoud remove that condition that is used inside the fieiled , take a example as is we have used uppercasse letter in password then the section of using Upper case shoud be removed.
