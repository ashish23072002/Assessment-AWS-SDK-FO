import styles from '@/assets/styles/pages/navbar.module.css';
import { useAlertContext } from '@/context/alert-context';
import { useAuth } from '@/hooks/use-auth';
import useClickOutsideHide from '@/hooks/use-click-outside-hide';
import { getUserInitials } from '@/shared/utils';
import ApiService from '@/shared/api-service';
import { Fragment, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';

function UserAvatar() {
  const navigate = useNavigate();
  const { setAlert } = useAlertContext();
  const { user, projectName, updateAuthContext } = useAuth();
  const [showAvatarCard, setShowAvatarCard] = useState(false);
  const userInfoCardRef = useClickOutsideHide<HTMLDivElement>(setShowAvatarCard);
  const [approvalCount, setApprovalCount] = useState<number>(0);

  function getUserName(name: string): string {
    const nameArray = name.split(' ');
    return nameArray[0];
  }

  useEffect(() => {
    fetchApprovals();
  }, []);

  async function fetchApprovals(): Promise<void> {
    try {
      const res = await ApiService.getData<Approval[]>('approvals');
      const pendingCount = res.body.filter(n => n.status === 'PENDING').length;
      setApprovalCount(pendingCount);
    } catch (err: any) {
      setAlert((err as ApiError).message);
    }
  }

  function handleSettings(settingName: string): void {
    switch (settingName) {
      case 'profile':
        navigate('users/me');
        break;
      case 'approvals':
        navigate('approvals');
        break;
      case 'newproject':
        navigate('project-setup');
        break;
      case 'settings':
        break;
      case 'reset-password':
        navigate('auth/reset-password');
        break;
      case 'logout':
        logout(user.email);
        break;
    }
    setShowAvatarCard(false);
  }

  async function logout(email?: string): Promise<void> {
    try {
      // make api call to logout the user
      // // await ApiService.postData<UserAuth, User>('logout', { email });
      updateAuthContext({
        user: null,
        expiresAt: null,
        isAuthenticated: null,
        projectId: localStorage.getItem('projectId'),
        projectName: localStorage.getItem('projectName'),
        token: null
      });
      console.log(`User with email ${email} logged out successfully.`);
      navigate('/auth/login', { replace: true });
    } catch (err: any) {
      setAlert((err as ApiError).message);
    }
  }

  return (
    <Fragment>
      <div className={styles.avatar} onClick={() => setShowAvatarCard(prev => !prev)} title={user.email}>
        <span className="text-danger px-2">
          <div style={{ fontSize: '15px', fontWeight: 'bold' }} className="text-end">
            {getUserName(user.name)}
          </div>
          <div style={{ fontSize: '11px' }} className="text-end">
            {user.type === 'ADMIN'
              ? 'Admin'
              : user?.permissions.DevOps_Lead?.includes(projectName!)
              ? 'DevOps_Lead'
              : 'DevOps'}
          </div>
        </span>
        <span className={styles.avatarIconContainer}>
          <span className={styles.avatarIcon}>{getUserInitials(user.name)}</span>
        </span>
      </div>
      {showAvatarCard && (
        <div className={styles.userInfoCard} ref={userInfoCardRef}>
          <div className={styles.userInfoCardItem} onClick={() => handleSettings('profile')}>
            <i className="bi bi-person text-danger fs-5 me-2"></i>Profile
          </div>
          <div className={`${styles.userInfoCardItem}`} onClick={() => handleSettings('approvals')}>
            <i className="bi bi-check-all text-danger fs-5 me-2"></i>Approvals
            <span className={`${styles.approvalCount}`}>{approvalCount}</span>
          </div>
          {user.type === 'USER' && (
            <div className={styles.userInfoCardItem} onClick={() => handleSettings('newproject')}>
              <i className="bi bi-plus-circle text-danger fs-5 me-2"></i>New Project
            </div>
          )}
          {/* <div className={styles.userInfoCardItem} onClick={() => handleSettings('settings')}>
            <i className="bi bi-sliders2 text-danger fs-5 me-2"></i>Settings
          </div> */}
          <div className={styles.userInfoCardItem} onClick={() => handleSettings('reset-password')}>
            <i className="bi bi-arrow-clockwise text-danger fs-5 me-2"></i>Reset Password
          </div>
          <div className={styles.userInfoCardItem} onClick={() => handleSettings('logout')}>
            <i className="bi bi-box-arrow-right text-danger fs-5 me-2"></i>Logout
          </div>
        </div>
      )}
    </Fragment>
  );
}

export default UserAvatar;


whent the approvals any changes are the done i have to rrefresh the page for the latst count of the approvals how to make this auto dynamic and i dont want to refresh the paeg you can take refrecce of theis code and make changes into this file of UserAvatar

this is the code you can take the refrennce 
  const { data: notifications } = useQuery({
    queryKey: ['notifications'],
    queryFn: fetchNotifications
  });

  async function fetchNotifications(): Promise<Notification[] | undefined> {
    try {
      const res = await ApiService.getData<Notification[]>('notifications');
      setNotificationCount(res.body.filter(n => n.status === 'UNREAD').length);
      return res.body;
    } catch (err: any) {
      setAlert((err as ApiError).message);
    }
  }

  const { mutate: mutateNotifications } = useMutation({
    mutationFn: readNotification,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
    }
  });

  async function readNotification(id?: string): Promise<void> {
    try {
      const url = id ? `notifications?notification_id=${id}` : 'notifications';
      await ApiService.updateData<Partial<Notification>, Notification>(url, { status: 'READ' });
      setNotificationCount(notifications?.filter(n => n.status === 'UNREAD').length || 0);
      navigate('notifications');
      setShowNotification(false);
    } catch (err: any) {
      setAlert((err as ApiError).message);
    }
  }

  return (
    <>
      <div
        className={`${styles.avatar} ms-2 me-4 position-relative`}
        onClick={() => setShowNotification(prev => !prev)}
      >
        <i className="bi bi-bell-fill text-danger fs-5"></i>
        <span className={`${styles.notifyCount} box-shadow`}>{notificationCount}</span>
      </div>
      {showNotification && (
        <div className={`${styles.notificationInfoCard} container`} ref={notificationRef}>
          <span className="d-flex my-2 pb-1 justify-content-between align-items-center border-bottom position-relative">
            <h6 className="m-0 text-black-50 fw-bold">Notifications({notificationCount})</h6>
            <i
              className="bi bi-sliders2 fs-5 text-black pointer"
              onClick={() => setShowNotificationConfig(prev => !prev)}
            ></i>
            {showNotificationConfig && (
              <p className={styles.notificationsConfigCard} ref={notificationConfigRef}>
                <small className={styles.notificationsConfigCardItem} onClick={() => handleSettings('viewall')}>
                  view all
                </small>
                <small className={styles.notificationsConfigCardItem} onClick={() => handleSettings('markallread')}>
                  mark all read
                </small>
              </p>
            )}
          </span>
          {notifications
            ?.filter(n => n.status === 'UNREAD')
            ?.map(notification => (
              <div
                key={notification.id}
                className="row pointer border-bottom"
                onClick={async () => {
                  mutateNotifications(notification.id);
                }}
              >
                <div className="col-2 py-3 ps-2 pe-0 d-flex justify-content-center align-items-center">
                  <span
                    className="border rounded-circle h6 m-0 text-center text-black-50"
                    style={{ width: '52px', height: '52px', paddingTop: '16px' }}
                  >
                    {getUserInitials(user.name)}
                  </span>
                </div>
                <div className="col-10 py-2" style={{  maxWidth: '333px' }}>
                  <h6 className="h6 fw-bold mb-1 text-black-50" style={{ fontSize: '14px' }}>
                    {notification.title}
                  </h6>
                  <p className="text-wrap text-black-50 " style={{ fontSize: '14px' }}>
                    {notification.description}
                  </p>
                </div>
              </div>
            ))}
        </div>
      )}
    </>
  );
}

export default NotificationCard;
