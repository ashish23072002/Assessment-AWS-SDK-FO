import { useAlertContext } from '@/context/alert-context';
import { useAuth } from '@/hooks/use-auth';
import axios from '@/shared/api-service';
import { Button, CircularProgress, Typography } from '@mui/material';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Dispatch, SetStateAction, useState } from 'react';

interface AddUsersToProjectProps extends Props {
  onClose: Dispatch<SetStateAction<boolean>>;
  fetchProjectById: () => Promise<void>;
}

function AddUsersToProject({ onClose, fetchProjectById }: AddUsersToProjectProps) {
  const { projectId } = useAuth();
  const { setAlert } = useAlertContext();
  const queryClient = useQueryClient();
  const [memberEmail, setMemberEmail] = useState('');
  const [projectMembers, setProjectMembers] = useState<string[]>([]);

  const { mutate: mutateProjectUsers, isLoading } = useMutation({
    mutationFn: addUsersToProject,
    onSuccess: async () => {
      queryClient.invalidateQueries({ queryKey: ['projects'] });
    }
  });

  function addUserToQueue(): void {
    setProjectMembers([...projectMembers, memberEmail]);
    setMemberEmail('');
  }

  function removeUserFromQueue(idx: number): void {
    const prevUsers = [...projectMembers];
    prevUsers.splice(idx, 1);
    setProjectMembers(prevUsers);
  }

  async function addUsersToProject(): Promise<void> {
    try {
      const body: Record<string, string[]> = {
        project_members: projectMembers
      };
      await axios.put<Partial<Group>, Group>(`projects/${projectId}/add`, body);
      await fetchProjectById();
      onClose(false);
    } catch (err: any) {
      setAlert(err.response.data.message || 'Failed to add users to the project, please try again.');
    }
  }

  return (
    <form onSubmit={e => e.preventDefault()} noValidate autoComplete="off">
      <Typography variant="h5" component="h1" className="mb-3">
        Add Users To Project
      </Typography>
      <div className="d-flex mb-3">
        <input
          className="form-control me-1"
          type="text"
          placeholder="user email"
          value={memberEmail}
          onChange={e => setMemberEmail(e.target.value)}
        />
        <button
          className="btn btn-danger btn-sm px-3 mx-1"
          title="Add User"
          type="submit"
          onClick={addUserToQueue}
          disabled={!memberEmail || !memberEmail.includes('@vodafone.com') || projectMembers.includes(memberEmail)}
        >
          +
        </button>
      </div>
      {projectMembers?.map((user, idx) => (
        <div className="d-flex justify-content-between align-items-center  mb-3 px-1" key={idx}>
          <p>{user}</p>
          <i
            className="bi bi-x-circle text-danger fs-5 me-2 pointer"
            title="Remove User"
            onClick={() => removeUserFromQueue(idx)}
          ></i>
        </div>
      ))}
      {isLoading && (
        <Button variant="contained" fullWidth color="error" type="button" style={{ padding: '6px 55px' }}>
          <CircularProgress color="inherit" style={{ width: '24px', height: '24px' }} />
        </Button>
      )}
      {!isLoading && projectMembers.length > 0 && (
        <button className="btn btn-sm btn-danger form-control py-2" type="button" onClick={() => mutateProjectUsers()}>
          Submit
        </button>
      )}
    </form>
  );
}

export default AddUsersToProject;


heaitr whin i am sendaing payload od an existing use we are getting an error iuin risponce which is 
already_exists
:
["Deepak.devops@vodafone.com"]
invalid_domain
: 
null
not_exists
: 
null
message
: 
"Project Details Updated Successfully"
request_id
: 
"a2f80013-edb3-453a-9e3c-97c7a7fd0bea"
success
: 
true

if er are gettin the algesady axxis any email from the backend we want to send the error of the user already exist Like in set elert

